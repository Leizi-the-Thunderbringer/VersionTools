2025-10-02T06:54:20.6254949Z ##[group]Run cppcheck --enable=all --suppress=missingIncludeSystem src/core/ || true
2025-10-02T06:54:20.6255259Z [36;1mcppcheck --enable=all --suppress=missingIncludeSystem src/core/ || true[0m
2025-10-02T06:54:20.6288153Z shell: /usr/bin/bash -e {0}
2025-10-02T06:54:20.6288258Z ##[endgroup]
2025-10-02T06:54:20.6568778Z Checking src/core/GitManager.cpp ...
2025-10-02T06:54:21.3700370Z src/core/GitManager.cpp:27:5: style: Class 'Impl' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
2025-10-02T06:54:21.3701414Z     Impl(const std::string& repoPath) : repositoryPath(repoPath) {
2025-10-02T06:54:21.3701843Z     ^
2025-10-02T06:54:21.3817090Z src/core/GitManager.cpp:785:35: style: Condition '!line.empty()' is always true [knownConditionTrueFalse]
2025-10-02T06:54:21.3818092Z         } else if (currentHunk && !line.empty()) {
2025-10-02T06:54:21.3818578Z                                   ^
2025-10-02T06:54:21.3819096Z src/core/GitManager.cpp:769:23: note: Assuming that condition 'line.empty()' is not redundant
2025-10-02T06:54:21.3819751Z         if (line.empty()) continue;
2025-10-02T06:54:21.3820068Z                       ^
2025-10-02T06:54:21.3820441Z src/core/GitManager.cpp:785:35: note: Condition '!line.empty()' is always true
2025-10-02T06:54:21.3821349Z         } else if (currentHunk && !line.empty()) {
2025-10-02T06:54:21.3821657Z                                   ^
2025-10-02T06:54:21.3822193Z src/core/GitManager.cpp:880:39: style: Condition '!line.empty()' is always true [knownConditionTrueFalse]
2025-10-02T06:54:21.3822773Z             } else if (currentHunk && !line.empty()) {
2025-10-02T06:54:21.3823083Z                                       ^
2025-10-02T06:54:21.3823559Z src/core/GitManager.cpp:862:27: note: Assuming that condition 'line.empty()' is not redundant
2025-10-02T06:54:21.3824056Z             if (line.empty()) continue;
2025-10-02T06:54:21.3824335Z                           ^
2025-10-02T06:54:21.3824974Z src/core/GitManager.cpp:880:39: note: Condition '!line.empty()' is always true
2025-10-02T06:54:21.3825496Z             } else if (currentHunk && !line.empty()) {
2025-10-02T06:54:21.3825809Z                                       ^
2025-10-02T06:54:21.3872240Z src/core/GitManager.cpp:394:15: style: Local variable 'commit' shadows outer function [shadowFunction]
2025-10-02T06:54:21.3873090Z     GitCommit commit;
2025-10-02T06:54:21.3873338Z               ^
2025-10-02T06:54:21.3873615Z src/core/GitManager.h:59:24: note: Shadowed declaration
2025-10-02T06:54:21.3874148Z     GitOperationResult commit(const std::string& message, bool amend = false);
2025-10-02T06:54:21.3874576Z                        ^
2025-10-02T06:54:21.3875180Z src/core/GitManager.cpp:394:15: note: Shadow variable
2025-10-02T06:54:21.3875723Z     GitCommit commit;
2025-10-02T06:54:21.3876073Z               ^
2025-10-02T06:54:21.3876724Z src/core/GitManager.cpp:580:23: style: Local variable 'commit' shadows outer function [shadowFunction]
2025-10-02T06:54:21.3877241Z             GitCommit commit;
2025-10-02T06:54:21.3877496Z                       ^
2025-10-02T06:54:21.3877782Z src/core/GitManager.h:59:24: note: Shadowed declaration
2025-10-02T06:54:21.3878279Z     GitOperationResult commit(const std::string& message, bool amend = false);
2025-10-02T06:54:21.3878691Z                        ^
2025-10-02T06:54:21.3878979Z src/core/GitManager.cpp:580:23: note: Shadow variable
2025-10-02T06:54:21.3879316Z             GitCommit commit;
2025-10-02T06:54:21.3879555Z                       ^
2025-10-02T06:54:21.3880001Z src/core/GitManager.cpp:650:18: style: Local variable 'stash' shadows outer function [shadowFunction]
2025-10-02T06:54:21.3880456Z         GitStash stash;
2025-10-02T06:54:21.3880635Z                  ^
2025-10-02T06:54:21.3880876Z src/core/GitManager.h:115:24: note: Shadowed declaration
2025-10-02T06:54:21.3881329Z     GitOperationResult stash(const std::string& message = "", bool includeUntracked = false);
2025-10-02T06:54:21.3881714Z                        ^
2025-10-02T06:54:21.3881944Z src/core/GitManager.cpp:650:18: note: Shadow variable
2025-10-02T06:54:21.3882575Z         GitStash stash;
2025-10-02T06:54:21.3882868Z                  ^
2025-10-02T06:54:21.3883720Z src/core/GitManager.cpp:546:20: performance: Inefficient usage of string::find() in condition; string::starts_with() could be faster. [stlIfStrFind]
2025-10-02T06:54:21.3884470Z         if (branch.name.find("origin/") == 0 || branch.name.find("remotes/") == 0) {
2025-10-02T06:54:21.3884894Z                    ^
2025-10-02T06:54:21.3885401Z src/core/GitManager.cpp:549:24: performance: Inefficient usage of string::find() in condition; string::starts_with() could be faster. [stlIfStrFind]
2025-10-02T06:54:21.3885961Z             if (branch.name.find("remotes/") == 0) {
2025-10-02T06:54:21.3886215Z                        ^
2025-10-02T06:54:21.3993440Z Checking src/core/GitManager.cpp: USE_LIBGIT2...
2025-10-02T06:54:22.1191294Z Checking src/core/GitManager.cpp: _WIN32...
2025-10-02T06:54:22.8384088Z 1/3 files checked 56% done
2025-10-02T06:54:22.8384639Z Checking src/core/GitUtils.cpp ...
2025-10-02T06:54:22.8867452Z src/core/GitUtils.cpp:339:18: performance: Ineffective call of function 'substr' because a prefix of the string is assigned to itself. Use resize() or pop_back() instead. [uselessCallsSubstr]
2025-10-02T06:54:22.8869771Z         result = result.substr(0, result.length() - 4);
2025-10-02T06:54:22.8870355Z                  ^
2025-10-02T06:54:22.8871375Z src/core/GitUtils.cpp:226:5: style: Consider using std::all_of or std::none_of algorithm instead of a raw loop. [useStlAlgorithm]
2025-10-02T06:54:22.8872184Z     for (const auto& invalid : INVALID_BRANCH_CHARS) {
2025-10-02T06:54:22.8872557Z     ^
2025-10-02T06:54:22.8873111Z src/core/GitUtils.cpp:434:21: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
2025-10-02T06:54:22.8873761Z         if (c == 0) {
2025-10-02T06:54:22.8874003Z                     ^
2025-10-02T06:54:22.8874578Z src/core/GitUtils.cpp:468:13: style: Consider using std::count_if algorithm instead of a raw loop. [useStlAlgorithm]
2025-10-02T06:54:22.8875539Z             count++;
2025-10-02T06:54:22.8875787Z             ^
2025-10-02T06:54:22.8876351Z src/core/GitUtils.cpp:481:13: style: Consider using std::count_if algorithm instead of a raw loop. [useStlAlgorithm]
2025-10-02T06:54:22.8877008Z             count++;
2025-10-02T06:54:22.8877253Z             ^
2025-10-02T06:54:22.8896209Z 2/3 files checked 80% done
2025-10-02T06:54:22.8896662Z Checking src/core/SystemCommand.cpp ...
2025-10-02T06:54:22.9073611Z src/core/SystemCommand.cpp:305:21: style: Local variable 'bytesRead' shadows outer variable [shadowVariable]
2025-10-02T06:54:22.9074336Z             ssize_t bytesRead;
2025-10-02T06:54:22.9074591Z                     ^
2025-10-02T06:54:22.9075194Z src/core/SystemCommand.cpp:293:17: note: Shadowed declaration
2025-10-02T06:54:22.9075603Z         ssize_t bytesRead;
2025-10-02T06:54:22.9075838Z                 ^
2025-10-02T06:54:22.9076133Z src/core/SystemCommand.cpp:305:21: note: Shadow variable
2025-10-02T06:54:22.9076524Z             ssize_t bytesRead;
2025-10-02T06:54:22.9076893Z                     ^
2025-10-02T06:54:22.9077670Z src/core/SystemCommand.cpp:320:33: style: Local variable 'result' shadows outer variable [shadowVariable]
2025-10-02T06:54:22.9078457Z             SystemCommandResult result;
2025-10-02T06:54:22.9078749Z                                 ^
2025-10-02T06:54:22.9079116Z src/core/SystemCommand.cpp:290:15: note: Shadowed declaration
2025-10-02T06:54:22.9079558Z         pid_t result = waitpid(pid, &status, WNOHANG);
2025-10-02T06:54:22.9079873Z               ^
2025-10-02T06:54:22.9080168Z src/core/SystemCommand.cpp:320:33: note: Shadow variable
2025-10-02T06:54:22.9080538Z             SystemCommandResult result;
2025-10-02T06:54:22.9080828Z                                 ^
2025-10-02T06:54:22.9081464Z src/core/SystemCommand.cpp:244:19: style: Consider using std::transform algorithm instead of a raw loop. [useStlAlgorithm]
2025-10-02T06:54:22.9082162Z             cArgs.push_back(const_cast<char*>(arg.c_str()));
2025-10-02T06:54:22.9082895Z                   ^
2025-10-02T06:54:22.9097481Z Checking src/core/SystemCommand.cpp: _WIN32...
2025-10-02T06:54:22.9244363Z src/core/SystemCommand.cpp:416:73: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
2025-10-02T06:54:22.9245581Z         if (GetFileAttributes(path.c_str()) != INVALID_FILE_ATTRIBUTES) {
2025-10-02T06:54:22.9246054Z                                                                         ^
2025-10-02T06:54:22.9256611Z 3/3 files checked 100% done
2025-10-02T06:54:22.9258999Z src/core/GitManager.cpp:65:0: style: The function 'initRepository' is never used. [unusedFunction]
2025-10-02T06:54:22.9260190Z GitOperationResult GitManager::initRepository(const std::string& path, bool bare) {
2025-10-02T06:54:22.9260953Z ^
2025-10-02T06:54:22.9261587Z src/core/GitManager.cpp:90:0: style: The function 'openRepository' is never used. [unusedFunction]
2025-10-02T06:54:22.9262546Z GitOperationResult GitManager::openRepository(const std::string& path) {
2025-10-02T06:54:22.9263248Z ^
2025-10-02T06:54:22.9263891Z src/core/GitManager.cpp:121:0: style: The function 'getRepositoryInfo' is never used. [unusedFunction]
2025-10-02T06:54:22.9264981Z GitRepository GitManager::getRepositoryInfo() const {
2025-10-02T06:54:22.9265916Z ^
2025-10-02T06:54:22.9266524Z src/core/GitManager.cpp:232:0: style: The function 'getRepositoryPath' is never used. [unusedFunction]
2025-10-02T06:54:22.9267351Z std::string GitManager::getRepositoryPath() const {
2025-10-02T06:54:22.9267792Z ^
2025-10-02T06:54:22.9268342Z src/core/GitManager.cpp:247:0: style: The function 'addAllFiles' is never used. [unusedFunction]
2025-10-02T06:54:22.9269121Z GitOperationResult GitManager::addAllFiles() {
2025-10-02T06:54:22.9269545Z ^
2025-10-02T06:54:22.9270108Z src/core/GitManager.cpp:251:0: style: The function 'removeFiles' is never used. [unusedFunction]
2025-10-02T06:54:22.9271146Z GitOperationResult GitManager::removeFiles(const std::vector<std::string>& files, bool cached) {
2025-10-02T06:54:22.9271874Z ^
2025-10-02T06:54:22.9272410Z src/core/GitManager.cpp:265:0: style: The function 'resetFiles' is never used. [unusedFunction]
2025-10-02T06:54:22.9273365Z GitOperationResult GitManager::resetFiles(const std::vector<std::string>& files) {
2025-10-02T06:54:22.9274019Z ^
2025-10-02T06:54:22.9274558Z src/core/GitManager.cpp:276:0: style: The function 'resetHard' is never used. [unusedFunction]
2025-10-02T06:54:22.9275640Z GitOperationResult GitManager::resetHard(const std::string& commitHash) {
2025-10-02T06:54:22.9276230Z ^
2025-10-02T06:54:22.9276817Z src/core/GitManager.cpp:289:0: style: The function 'commitWithFiles' is never used. [unusedFunction]
2025-10-02T06:54:22.9277772Z GitOperationResult GitManager::commitWithFiles(const std::string& message,
2025-10-02T06:54:22.9278355Z ^
2025-10-02T06:54:22.9278940Z src/core/GitManager.cpp:301:0: style: The function 'getCommitHistory' is never used. [unusedFunction]
2025-10-02T06:54:22.9279841Z std::vector<GitCommit> GitManager::getCommitHistory(int maxCount,
2025-10-02T06:54:22.9280367Z ^
2025-10-02T06:54:22.9280916Z src/core/GitManager.cpp:350:0: style: The function 'getCommit' is never used. [unusedFunction]
2025-10-02T06:54:22.9281822Z std::optional<GitCommit> GitManager::getCommit(const std::string& hash) const {
2025-10-02T06:54:22.9282432Z ^
2025-10-02T06:54:22.9282928Z src/core/GitManager.cpp:477:0: style: The function 'getLastError' is never used. [unusedFunction]
2025-10-02T06:54:22.9283625Z std::string GitManager::getLastError() const {
2025-10-02T06:54:22.9284018Z ^
2025-10-02T06:54:22.9284572Z src/core/GitManager.cpp:481:0: style: The function 'hasUncommittedChanges' is never used. [unusedFunction]
2025-10-02T06:54:22.9285569Z bool GitManager::hasUncommittedChanges() const {
2025-10-02T06:54:22.9286004Z ^
2025-10-02T06:54:22.9286601Z src/core/GitManager.cpp:485:0: style: The function 'hasUnstagedChanges' is never used. [unusedFunction]
2025-10-02T06:54:22.9287317Z bool GitManager::hasUnstagedChanges() const {
2025-10-02T06:54:22.9287946Z ^
2025-10-02T06:54:22.9288410Z src/core/GitManager.cpp:489:0: style: The function 'hasStagedChanges' is never used. [unusedFunction]
2025-10-02T06:54:22.9289148Z bool GitManager::hasStagedChanges() const {
2025-10-02T06:54:22.9289482Z ^
2025-10-02T06:54:22.9289931Z src/core/GitManager.cpp:493:0: style: The function 'setLogCallback' is never used. [unusedFunction]
2025-10-02T06:54:22.9290560Z void GitManager::setLogCallback(LogCallback callback) {
2025-10-02T06:54:22.9290939Z ^
2025-10-02T06:54:22.9291435Z src/core/GitManager.cpp:497:0: style: The function 'setProgressCallback' is never used. [unusedFunction]
2025-10-02T06:54:22.9292259Z void GitManager::setProgressCallback(ProgressCallback callback) {
2025-10-02T06:54:22.9292717Z ^
2025-10-02T06:54:22.9293245Z src/core/GitManager.cpp:501:0: style: The function 'cloneRepositoryAsync' is never used. [unusedFunction]
2025-10-02T06:54:22.9294227Z std::future<GitOperationResult> GitManager::cloneRepositoryAsync(const std::string& url,
2025-10-02T06:54:22.9294981Z ^
2025-10-02T06:54:22.9295498Z src/core/GitManager.cpp:513:0: style: The function 'getBranches' is never used. [unusedFunction]
2025-10-02T06:54:22.9296277Z std::vector<GitBranch> GitManager::getBranches(bool includeRemote) const {
2025-10-02T06:54:22.9297036Z ^
2025-10-02T06:54:22.9297521Z src/core/GitManager.cpp:606:0: style: The function 'createBranch' is never used. [unusedFunction]
2025-10-02T06:54:22.9298471Z GitOperationResult GitManager::createBranch(const std::string& name, const std::string& startPoint) {
2025-10-02T06:54:22.9299158Z ^
2025-10-02T06:54:22.9299653Z src/core/GitManager.cpp:617:0: style: The function 'deleteBranch' is never used. [unusedFunction]
2025-10-02T06:54:22.9300501Z GitOperationResult GitManager::deleteBranch(const std::string& name, bool force) {
2025-10-02T06:54:22.9301030Z ^
2025-10-02T06:54:22.9301521Z src/core/GitManager.cpp:627:0: style: The function 'checkoutBranch' is never used. [unusedFunction]
2025-10-02T06:54:22.9302344Z GitOperationResult GitManager::checkoutBranch(const std::string& name) {
2025-10-02T06:54:22.9302891Z ^
2025-10-02T06:54:22.9303482Z src/core/GitManager.cpp:632:0: style: The function 'getStashes' is never used. [unusedFunction]
2025-10-02T06:54:22.9304231Z std::vector<GitStash> GitManager::getStashes() const {
2025-10-02T06:54:22.9304666Z ^
2025-10-02T06:54:22.9305347Z src/core/GitManager.cpp:677:0: style: The function 'stash' is never used. [unusedFunction]
2025-10-02T06:54:22.9306238Z GitOperationResult GitManager::stash(const std::string& message, bool includeUntracked) {
2025-10-02T06:54:22.9306815Z ^
2025-10-02T06:54:22.9307287Z src/core/GitManager.cpp:692:0: style: The function 'stashPop' is never used. [unusedFunction]
2025-10-02T06:54:22.9307969Z GitOperationResult GitManager::stashPop(int index) {
2025-10-02T06:54:22.9308389Z ^
2025-10-02T06:54:22.9308886Z src/core/GitManager.cpp:702:0: style: The function 'stashApply' is never used. [unusedFunction]
2025-10-02T06:54:22.9309611Z GitOperationResult GitManager::stashApply(int index) {
2025-10-02T06:54:22.9310052Z ^
2025-10-02T06:54:22.9310525Z src/core/GitManager.cpp:712:0: style: The function 'stashDrop' is never used. [unusedFunction]
2025-10-02T06:54:22.9311266Z GitOperationResult GitManager::stashDrop(int index) {
2025-10-02T06:54:22.9311716Z ^
2025-10-02T06:54:22.9312229Z src/core/GitManager.cpp:722:0: style: The function 'stashClear' is never used. [unusedFunction]
2025-10-02T06:54:22.9312932Z GitOperationResult GitManager::stashClear() {
2025-10-02T06:54:22.9313338Z ^
2025-10-02T06:54:22.9313861Z src/core/GitManager.cpp:727:0: style: The function 'getCommitDiff' is never used. [unusedFunction]
2025-10-02T06:54:22.9314861Z GitDiff GitManager::getCommitDiff(const std::string& commitHash) const {
2025-10-02T06:54:22.9315391Z ^
2025-10-02T06:54:22.9315931Z src/core/GitManager.cpp:810:0: style: The function 'getCommitDiffAll' is never used. [unusedFunction]
2025-10-02T06:54:22.9316844Z std::vector<GitDiff> GitManager::getCommitDiffAll(const std::string& commitHash) const {
2025-10-02T06:54:22.9317664Z ^
2025-10-02T06:54:22.9318009Z src/core/GitManager.cpp:913:0: style: The function 'getRemotes' is never used. [unusedFunction]
2025-10-02T06:54:22.9318453Z std::vector<GitRemote> GitManager::getRemotes() const {
2025-10-02T06:54:22.9318721Z ^
2025-10-02T06:54:22.9319027Z src/core/GitManager.cpp:959:0: style: The function 'addRemote' is never used. [unusedFunction]
2025-10-02T06:54:22.9319580Z GitOperationResult GitManager::addRemote(const std::string& name, const std::string& url) {
2025-10-02T06:54:22.9319970Z ^
2025-10-02T06:54:22.9320295Z src/core/GitManager.cpp:971:0: style: The function 'removeRemote' is never used. [unusedFunction]
2025-10-02T06:54:22.9320831Z GitOperationResult GitManager::removeRemote(const std::string& name) {
2025-10-02T06:54:22.9321293Z ^
2025-10-02T06:54:22.9321839Z src/core/GitManager.cpp:983:0: style: The function 'renameRemote' is never used. [unusedFunction]
2025-10-02T06:54:22.9322989Z GitOperationResult GitManager::renameRemote(const std::string& oldName, const std::string& newName) {
2025-10-02T06:54:22.9323581Z ^
2025-10-02T06:54:22.9324274Z src/core/GitManager.cpp:996:0: style: The function 'getTags' is never used. [unusedFunction]
2025-10-02T06:54:22.9325330Z std::vector<GitTag> GitManager::getTags() const {
2025-10-02T06:54:22.9325891Z ^
2025-10-02T06:54:22.9326282Z src/core/GitManager.cpp:1039:0: style: The function 'createTag' is never used. [unusedFunction]
2025-10-02T06:54:22.9327095Z GitOperationResult GitManager::createTag(const std::string& name, const std::string& message,
2025-10-02T06:54:22.9327630Z ^
2025-10-02T06:54:22.9380356Z src/core/GitManager.cpp:1065:0: style: The function 'deleteTag' is never used. [unusedFunction]
2025-10-02T06:54:22.9381320Z GitOperationResult GitManager::deleteTag(const std::string& name) {
2025-10-02T06:54:22.9381866Z ^
2025-10-02T06:54:22.9382381Z src/core/GitManager.cpp:1077:0: style: The function 'pushTags' is never used. [unusedFunction]
2025-10-02T06:54:22.9383252Z GitOperationResult GitManager::pushTags(const std::string& remote) {
2025-10-02T06:54:22.9383838Z ^
2025-10-02T06:54:22.9384364Z src/core/GitManager.h:29:0: style: The function 'hasError' is never used. [unusedFunction]
2025-10-02T06:54:22.9385398Z     bool hasError() const { return !error.empty() || exitCode != 0; }
2025-10-02T06:54:22.9385903Z ^
2025-10-02T06:54:22.9386404Z src/core/GitTypes.h:37:0: style: The function 'isMerge' is never used. [unusedFunction]
2025-10-02T06:54:22.9387132Z     bool isMerge() const { return parentHashes.size() > 1; }
2025-10-02T06:54:22.9387587Z ^
2025-10-02T06:54:22.9388052Z src/core/GitUtils.cpp:48:0: style: The function 'join' is never used. [unusedFunction]
2025-10-02T06:54:22.9388584Z std::string GitUtils::join(const std::vector<std::string>& parts, const std::string& delimiter) {
2025-10-02T06:54:22.9388955Z ^
2025-10-02T06:54:22.9389251Z src/core/GitUtils.cpp:73:0: style: The function 'toUpper' is never used. [unusedFunction]
2025-10-02T06:54:22.9389685Z std::string GitUtils::toUpper(const std::string& str) {
2025-10-02T06:54:22.9389960Z ^
2025-10-02T06:54:22.9390285Z src/core/GitUtils.cpp:80:0: style: The function 'normalizePath' is never used. [unusedFunction]
2025-10-02T06:54:22.9390750Z std::string GitUtils::normalizePath(const std::string& path) {
2025-10-02T06:54:22.9391044Z ^
2025-10-02T06:54:22.9391342Z src/core/GitUtils.cpp:89:0: style: The function 'getFileName' is never used. [unusedFunction]
2025-10-02T06:54:22.9391794Z std::string GitUtils::getFileName(const std::string& path) {
2025-10-02T06:54:22.9392064Z ^
2025-10-02T06:54:22.9392361Z src/core/GitUtils.cpp:99:0: style: The function 'getDirectory' is never used. [unusedFunction]
2025-10-02T06:54:22.9392802Z std::string GitUtils::getDirectory(const std::string& path) {
2025-10-02T06:54:22.9393070Z ^
2025-10-02T06:54:22.9393357Z src/core/GitUtils.cpp:104:0: style: The function 'joinPaths' is never used. [unusedFunction]
2025-10-02T06:54:22.9393853Z std::string GitUtils::joinPaths(const std::string& path1, const std::string& path2) {
2025-10-02T06:54:22.9394498Z ^
2025-10-02T06:54:22.9395079Z src/core/GitUtils.cpp:109:0: style: The function 'isAbsolutePath' is never used. [unusedFunction]
2025-10-02T06:54:22.9395578Z bool GitUtils::isAbsolutePath(const std::string& path) {
2025-10-02T06:54:22.9395853Z ^
2025-10-02T06:54:22.9396176Z src/core/GitUtils.cpp:114:0: style: The function 'makeRelativePath' is never used. [unusedFunction]
2025-10-02T06:54:22.9396715Z std::string GitUtils::makeRelativePath(const std::string& from, const std::string& to) {
2025-10-02T06:54:22.9397069Z ^
2025-10-02T06:54:22.9397370Z src/core/GitUtils.cpp:124:0: style: The function 'shortenHash' is never used. [unusedFunction]
2025-10-02T06:54:22.9397839Z std::string GitUtils::shortenHash(const std::string& hash, int length) {
2025-10-02T06:54:22.9398159Z ^
2025-10-02T06:54:22.9398456Z src/core/GitUtils.cpp:131:0: style: The function 'isValidHash' is never used. [unusedFunction]
2025-10-02T06:54:22.9398879Z bool GitUtils::isValidHash(const std::string& hash) {
2025-10-02T06:54:22.9399142Z ^
2025-10-02T06:54:22.9399472Z src/core/GitUtils.cpp:139:0: style: The function 'formatCommitMessage' is never used. [unusedFunction]
2025-10-02T06:54:22.9400025Z std::string GitUtils::formatCommitMessage(const std::string& message, int maxLength) {
2025-10-02T06:54:22.9400548Z ^
2025-10-02T06:54:22.9400854Z src/core/GitUtils.cpp:156:0: style: The function 'formatAuthor' is never used. [unusedFunction]
2025-10-02T06:54:22.9401363Z std::string GitUtils::formatAuthor(const std::string& name, const std::string& email) {
2025-10-02T06:54:22.9401713Z ^
2025-10-02T06:54:22.9402030Z src/core/GitUtils.cpp:169:0: style: The function 'formatTimestamp' is never used. [unusedFunction]
2025-10-02T06:54:22.9402581Z std::string GitUtils::formatTimestamp(const std::chrono::system_clock::time_point& timestamp) {
2025-10-02T06:54:22.9402965Z ^
2025-10-02T06:54:22.9403288Z src/core/GitUtils.cpp:176:0: style: The function 'formatRelativeTime' is never used. [unusedFunction]
2025-10-02T06:54:22.9403885Z std::string GitUtils::formatRelativeTime(const std::chrono::system_clock::time_point& timestamp) {
2025-10-02T06:54:22.9404278Z ^
2025-10-02T06:54:22.9404608Z src/core/GitUtils.cpp:221:0: style: The function 'isValidBranchName' is never used. [unusedFunction]
2025-10-02T06:54:22.9405313Z bool GitUtils::isValidBranchName(const std::string& name) {
2025-10-02T06:54:22.9405594Z ^
2025-10-02T06:54:22.9405935Z src/core/GitUtils.cpp:235:0: style: The function 'sanitizeBranchName' is never used. [unusedFunction]
2025-10-02T06:54:22.9406427Z std::string GitUtils::sanitizeBranchName(const std::string& name) {
2025-10-02T06:54:22.9406723Z ^
2025-10-02T06:54:22.9407043Z src/core/GitUtils.cpp:258:0: style: The function 'getShortBranchName' is never used. [unusedFunction]
2025-10-02T06:54:22.9407542Z std::string GitUtils::getShortBranchName(const std::string& fullName) {
2025-10-02T06:54:22.9407849Z ^
2025-10-02T06:54:22.9408155Z src/core/GitUtils.cpp:271:0: style: The function 'isRemoteBranch' is never used. [unusedFunction]
2025-10-02T06:54:22.9408631Z bool GitUtils::isRemoteBranch(const std::string& branchName) {
2025-10-02T06:54:22.9408909Z ^
2025-10-02T06:54:22.9409248Z src/core/GitUtils.cpp:275:0: style: The function 'getRemoteFromBranch' is never used. [unusedFunction]
2025-10-02T06:54:22.9409778Z std::string GitUtils::getRemoteFromBranch(const std::string& branchName) {
2025-10-02T06:54:22.9410101Z ^
2025-10-02T06:54:22.9410409Z src/core/GitUtils.cpp:290:0: style: The function 'isValidGitUrl' is never used. [unusedFunction]
2025-10-02T06:54:22.9410849Z bool GitUtils::isValidGitUrl(const std::string& url) {
2025-10-02T06:54:22.9411107Z ^
2025-10-02T06:54:22.9411447Z src/core/GitUtils.cpp:313:0: style: The function 'extractRepoNameFromUrl' is never used. [unusedFunction]
2025-10-02T06:54:22.9411972Z std::string GitUtils::extractRepoNameFromUrl(const std::string& url) {
2025-10-02T06:54:22.9412273Z ^
2025-10-02T06:54:22.9412591Z src/core/GitUtils.cpp:351:0: style: The function 'normalizeGitUrl' is never used. [unusedFunction]
2025-10-02T06:54:22.9413214Z std::string GitUtils::normalizeGitUrl(const std::string& url) {
2025-10-02T06:54:22.9413494Z ^
2025-10-02T06:54:22.9413781Z src/core/GitUtils.cpp:371:0: style: The function 'isHttpsUrl' is never used. [unusedFunction]
2025-10-02T06:54:22.9414205Z bool GitUtils::isHttpsUrl(const std::string& url) {
2025-10-02T06:54:22.9414455Z ^
2025-10-02T06:54:22.9414972Z src/core/GitUtils.cpp:375:0: style: The function 'isSshUrl' is never used. [unusedFunction]
2025-10-02T06:54:22.9415409Z bool GitUtils::isSshUrl(const std::string& url) {
2025-10-02T06:54:22.9415650Z ^
2025-10-02T06:54:22.9415959Z src/core/GitUtils.cpp:380:0: style: The function 'isValidEmail' is never used. [unusedFunction]
2025-10-02T06:54:22.9416389Z bool GitUtils::isValidEmail(const std::string& email) {
2025-10-02T06:54:22.9416660Z ^
2025-10-02T06:54:22.9416998Z src/core/GitUtils.cpp:385:0: style: The function 'isValidCommitMessage' is never used. [unusedFunction]
2025-10-02T06:54:22.9417493Z bool GitUtils::isValidCommitMessage(const std::string& message) {
2025-10-02T06:54:22.9417794Z ^
2025-10-02T06:54:22.9418090Z src/core/GitUtils.cpp:399:0: style: The function 'isBinaryFile' is never used. [unusedFunction]
2025-10-02T06:54:22.9418784Z bool GitUtils::isBinaryFile(const std::string& filePath) {
2025-10-02T06:54:22.9419361Z ^
2025-10-02T06:54:22.9419691Z src/core/GitUtils.cpp:404:0: style: The function 'detectFileEncoding' is never used. [unusedFunction]
2025-10-02T06:54:22.9420188Z std::string GitUtils::detectFileEncoding(const std::string& filePath) {
2025-10-02T06:54:22.9420497Z ^
2025-10-02T06:54:22.9420807Z src/core/GitUtils.cpp:443:0: style: The function 'colorizeGitDiff' is never used. [unusedFunction]
2025-10-02T06:54:22.9421264Z std::string GitUtils::colorizeGitDiff(const std::string& diff) {
2025-10-02T06:54:22.9421547Z ^
2025-10-02T06:54:22.9421856Z src/core/GitUtils.cpp:462:0: style: The function 'countLinesAdded' is never used. [unusedFunction]
2025-10-02T06:54:22.9422301Z int GitUtils::countLinesAdded(const std::string& diff) {
2025-10-02T06:54:22.9422562Z ^
2025-10-02T06:54:22.9422881Z src/core/GitUtils.cpp:475:0: style: The function 'countLinesRemoved' is never used. [unusedFunction]
2025-10-02T06:54:22.9423338Z int GitUtils::countLinesRemoved(const std::string& diff) {
2025-10-02T06:54:22.9423604Z ^
2025-10-02T06:54:22.9423922Z src/core/GitUtils.cpp:488:0: style: The function 'extractHunkHeader' is never used. [unusedFunction]
2025-10-02T06:54:22.9424392Z std::string GitUtils::extractHunkHeader(const std::string& line) {
2025-10-02T06:54:22.9424681Z ^
2025-10-02T06:54:22.9425195Z src/core/GitUtils.cpp:499:0: style: The function 'formatProgress' is never used. [unusedFunction]
2025-10-02T06:54:22.9425745Z std::string GitUtils::formatProgress(int current, int total, const std::string& operation) {
2025-10-02T06:54:22.9426112Z ^
2025-10-02T06:54:22.9426438Z src/core/GitUtils.cpp:515:0: style: The function 'formatTransferSpeed' is never used. [unusedFunction]
2025-10-02T06:54:22.9426934Z std::string GitUtils::formatTransferSpeed(size_t bytesPerSecond) {
2025-10-02T06:54:22.9427230Z ^
2025-10-02T06:54:22.9427541Z src/core/GitUtils.cpp:519:0: style: The function 'formatDuration' is never used. [unusedFunction]
2025-10-02T06:54:22.9428049Z std::string GitUtils::formatDuration(const std::chrono::milliseconds& duration) {
2025-10-02T06:54:22.9428394Z ^
2025-10-02T06:54:22.9428741Z src/core/SystemCommand.cpp:343:0: style: The function 'executeWithCallback' is never used. [unusedFunction]
2025-10-02T06:54:22.9429445Z SystemCommandResult SystemCommand::executeWithCallback(const std::string& command, const std::vector<std::string>& args,
2025-10-02T06:54:22.9429924Z ^
2025-10-02T06:54:22.9430244Z src/core/SystemCommand.cpp:358:0: style: The function 'executeAsync' is never used. [unusedFunction]
2025-10-02T06:54:22.9430819Z void SystemCommand::executeAsync(const std::string& command, const std::vector<std::string>& args,
2025-10-02T06:54:22.9431198Z ^
2025-10-02T06:54:22.9431564Z src/core/SystemCommand.cpp:383:0: style: The function 'setEnvironmentVariable' is never used. [unusedFunction]
2025-10-02T06:54:22.9432337Z void SystemCommand::setEnvironmentVariable(const std::string& name, const std::string& value) {
2025-10-02T06:54:22.9432730Z ^
2025-10-02T06:54:22.9433107Z src/core/SystemCommand.cpp:387:0: style: The function 'clearEnvironmentVariables' is never used. [unusedFunction]
2025-10-02T06:54:22.9433612Z void SystemCommand::clearEnvironmentVariables() {
2025-10-02T06:54:22.9433863Z ^
2025-10-02T06:54:22.9434171Z src/core/SystemCommand.cpp:391:0: style: The function 'setTimeout' is never used. [unusedFunction]
2025-10-02T06:54:22.9434596Z void SystemCommand::setTimeout(int timeoutMs) {
2025-10-02T06:54:22.9434991Z ^
2025-10-02T06:54:22.9435322Z src/core/SystemCommand.cpp:405:0: style: The function 'getGitCommand' is never used. [unusedFunction]
2025-10-02T06:54:22.9435756Z std::string SystemCommand::getGitCommand() {
2025-10-02T06:54:22.9436017Z ^
2025-10-02T06:54:22.9436317Z src/core/SystemCommand.h:14:0: style: The function 'success' is never used. [unusedFunction]
2025-10-02T06:54:22.9436727Z     bool success() const { return exitCode == 0; }
2025-10-02T06:54:22.9436969Z ^
2025-10-02T06:54:22.9437337Z nofile:0:0: information: Active checkers: 161/592 (use --checkers-report=<filename> to see details) [checkersReport]
2025-10-02T06:54:22.9437861Z 
