name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          echo "## 更新内容" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md || echo "- 首次发布" >> CHANGELOG.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Version Tools v${{ steps.get_version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

  build-and-upload-macos:
    name: Build and Upload macOS
    needs: create-release
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install dependencies
        run: |
          brew install cmake libgit2

      - name: Build
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(sysctl -n hw.ncpu)

      - name: Create DMG
        run: |
          cd build
          cpack -G DragNDrop

      - name: Upload macOS DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: build/VersionTools-${{ needs.create-release.outputs.version }}-Darwin.dmg
          asset_name: VersionTools-${{ needs.create-release.outputs.version }}-macOS.dmg
          asset_content_type: application/x-apple-diskimage

  build-and-upload-linux:
    name: Build and Upload Linux
    needs: create-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            git \
            libgit2-dev \
            qt6-base-dev \
            qt6-tools-dev \
            qt6-l10n-tools

      - name: Build
        run: |
          mkdir build
          cd build
          cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release
          ninja

      - name: Create DEB package
        run: |
          cd build
          cpack -G DEB

      - name: Create RPM package
        run: |
          sudo apt-get install -y rpm
          cd build
          cpack -G RPM

      - name: Upload DEB package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: build/VersionTools-${{ needs.create-release.outputs.version }}-Linux.deb
          asset_name: VersionTools-${{ needs.create-release.outputs.version }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload RPM package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: build/VersionTools-${{ needs.create-release.outputs.version }}-Linux.rpm
          asset_name: VersionTools-${{ needs.create-release.outputs.version }}-Linux.rpm
          asset_content_type: application/x-rpm

  build-and-upload-windows:
    name: Build and Upload Windows
    needs: create-release
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup MSVC
        uses: microsoft/setup-msbuild@v2

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.7.0'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          modules: 'qtbase qttools'

      - name: Build
        run: |
          mkdir build
          cd build
          cmake .. -G "Visual Studio 17 2022" -A x64
          cmake --build . --config Release

      - name: Create ZIP package
        run: |
          cd build
          cpack -G ZIP -C Release

      - name: Upload Windows ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: build/VersionTools-${{ needs.create-release.outputs.version }}-win64.zip
          asset_name: VersionTools-${{ needs.create-release.outputs.version }}-Windows.zip
          asset_content_type: application/zip
