name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  CMAKE_VERSION: 3.20.0
  QT_VERSION: 6.5.0

jobs:
  build-macos:
    name: Build macOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install dependencies
        run: |
          brew install cmake libgit2 ninja
          brew list --versions

      - name: Configure CMake
        run: |
          # Find libgit2 location
          export PKG_CONFIG_PATH="$(brew --prefix)/lib/pkgconfig:$PKG_CONFIG_PATH"
          export LIBGIT2_PREFIX="$(brew --prefix libgit2)"
          echo "libgit2 found at: $LIBGIT2_PREFIX"

          mkdir build
          cd build
          cmake -GXcode \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_TESTS=ON \
            -DCMAKE_PREFIX_PATH="${LIBGIT2_PREFIX}" \
            -DLIBGIT2_INCLUDE_DIR="${LIBGIT2_PREFIX}/include" \
            -DLIBGIT2_LIBRARY="${LIBGIT2_PREFIX}/lib/libgit2.dylib" \
            ..

      - name: Build
        run: |
          cd build
          cmake --build . --config Release --parallel $(sysctl -n hw.ncpu)

      - name: Run tests
        run: |
          cd build
          ctest --config Release --output-on-failure || true

      - name: Create DMG
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cd build
          cpack -G DragNDrop

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VersionTools-macOS
          path: |
            build/bin/Release/VersionTools.app
            build/*.dmg
          if-no-files-found: error

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            libgit2-dev \
            qt6-base-dev \
            qt6-tools-dev \
            qt6-tools-dev-tools \
            libgl1-mesa-dev

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_TESTS=ON \
            ..

      - name: Build
        run: |
          cd build
          ninja -j$(nproc)

      - name: Run tests
        run: |
          cd build
          ctest --output-on-failure || true

      - name: Create AppImage
        run: |
          cd build
          # Install linuxdeploy and create AppImage
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x *.AppImage
          ./linuxdeploy-x86_64.AppImage \
            --appdir AppDir \
            --executable bin/VersionTools \
            --desktop-file ../resources/VersionTools.desktop \
            --icon-file ../icons/AppIcon.png \
            --plugin qt \
            --output appimage || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VersionTools-Linux
          path: |
            build/bin/VersionTools
            build/*.AppImage
            build/*.deb
            build/*.rpm
          if-no-files-found: warn

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.5.0'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'

      - name: Install dependencies
        run: |
          choco install cmake ninja git
          # Install vcpkg for libgit2
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe install libgit2:x64-windows

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake `
            -GNinja `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake `
            -DBUILD_TESTS=ON `
            ..

      - name: Build
        run: |
          cd build
          ninja

      - name: Run tests
        run: |
          cd build
          ctest --config Release --output-on-failure

      - name: Create installer
        run: |
          cd build
          cpack -G NSIS

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VersionTools-Windows
          path: |
            build/bin/Release/VersionTools.exe
            build/*.exe
            build/*.msi
          if-no-files-found: warn

  release:
    name: Create Release
    needs: [build-macos, build-linux, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create changelog
        id: changelog
        run: |
          echo "## What's Changed" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Contributors" >> CHANGELOG.md
          git log --pretty=format:"- @%an" $(git describe --tags --abbrev=0 HEAD^)..HEAD | sort -u >> CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
          files: |
            VersionTools-macOS/*.dmg
            VersionTools-Linux/*.AppImage
            VersionTools-Linux/*.deb
            VersionTools-Linux/*.rpm
            VersionTools-Windows/*.exe
            VersionTools-Windows/*.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install code quality tools
        run: |
          pip install cpplint
          sudo apt-get install -y clang-format cppcheck

      - name: Run cpplint
        continue-on-error: true
        run: |
          find src -name "*.cpp" -o -name "*.h" | xargs cpplint --filter=-legal/copyright,-build/include_subdir

      - name: Run cppcheck
        continue-on-error: true
        run: |
          cppcheck --enable=all --suppress=missingIncludeSystem src/

      - name: Check code formatting
        continue-on-error: true
        run: |
          find src -name "*.cpp" -o -name "*.h" | xargs clang-format -n --Werror