2025-10-02T07:00:56.5614441Z ##[group]Run cppcheck --enable=all --suppress=missingIncludeSystem src/core/ || true
2025-10-02T07:00:56.5615047Z [36;1mcppcheck --enable=all --suppress=missingIncludeSystem src/core/ || true[0m
2025-10-02T07:00:56.5647011Z shell: /usr/bin/bash -e {0}
2025-10-02T07:00:56.5647296Z ##[endgroup]
2025-10-02T07:00:56.5953152Z Checking src/core/GitManager.cpp ...
2025-10-02T07:00:57.2895030Z src/core/GitManager.cpp:27:5: style: Class 'Impl' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
2025-10-02T07:00:57.2896006Z     Impl(const std::string& repoPath) : repositoryPath(repoPath) {
2025-10-02T07:00:57.2896444Z     ^
2025-10-02T07:00:57.3011368Z src/core/GitManager.cpp:785:35: style: Condition '!line.empty()' is always true [knownConditionTrueFalse]
2025-10-02T07:00:57.3012487Z         } else if (currentHunk && !line.empty()) {
2025-10-02T07:00:57.3012904Z                                   ^
2025-10-02T07:00:57.3013515Z src/core/GitManager.cpp:769:23: note: Assuming that condition 'line.empty()' is not redundant
2025-10-02T07:00:57.3014119Z         if (line.empty()) continue;
2025-10-02T07:00:57.3014398Z                       ^
2025-10-02T07:00:57.3014780Z src/core/GitManager.cpp:785:35: note: Condition '!line.empty()' is always true
2025-10-02T07:00:57.3015261Z         } else if (currentHunk && !line.empty()) {
2025-10-02T07:00:57.3015572Z                                   ^
2025-10-02T07:00:57.3016109Z src/core/GitManager.cpp:880:39: style: Condition '!line.empty()' is always true [knownConditionTrueFalse]
2025-10-02T07:00:57.3016698Z             } else if (currentHunk && !line.empty()) {
2025-10-02T07:00:57.3017017Z                                       ^
2025-10-02T07:00:57.3017500Z src/core/GitManager.cpp:862:27: note: Assuming that condition 'line.empty()' is not redundant
2025-10-02T07:00:57.3018024Z             if (line.empty()) continue;
2025-10-02T07:00:57.3018310Z                           ^
2025-10-02T07:00:57.3018702Z src/core/GitManager.cpp:880:39: note: Condition '!line.empty()' is always true
2025-10-02T07:00:57.3019182Z             } else if (currentHunk && !line.empty()) {
2025-10-02T07:00:57.3019500Z                                       ^
2025-10-02T07:00:57.3066027Z src/core/GitManager.cpp:394:15: style: Local variable 'commit' shadows outer function [shadowFunction]
2025-10-02T07:00:57.3066915Z     GitCommit commit;
2025-10-02T07:00:57.3067309Z               ^
2025-10-02T07:00:57.3067785Z src/core/GitManager.h:59:24: note: Shadowed declaration
2025-10-02T07:00:57.3068657Z     GitOperationResult commit(const std::string& message, bool amend = false);
2025-10-02T07:00:57.3069411Z                        ^
2025-10-02T07:00:57.3069916Z src/core/GitManager.cpp:394:15: note: Shadow variable
2025-10-02T07:00:57.3070456Z     GitCommit commit;
2025-10-02T07:00:57.3070830Z               ^
2025-10-02T07:00:57.3071909Z src/core/GitManager.cpp:580:23: style: Local variable 'commit' shadows outer function [shadowFunction]
2025-10-02T07:00:57.3072837Z             GitCommit commit;
2025-10-02T07:00:57.3073281Z                       ^
2025-10-02T07:00:57.3073763Z src/core/GitManager.h:59:24: note: Shadowed declaration
2025-10-02T07:00:57.3074477Z     GitOperationResult commit(const std::string& message, bool amend = false);
2025-10-02T07:00:57.3075060Z                        ^
2025-10-02T07:00:57.3075472Z src/core/GitManager.cpp:580:23: note: Shadow variable
2025-10-02T07:00:57.3075949Z             GitCommit commit;
2025-10-02T07:00:57.3076263Z                       ^
2025-10-02T07:00:57.3076818Z src/core/GitManager.cpp:650:18: style: Local variable 'stash' shadows outer function [shadowFunction]
2025-10-02T07:00:57.3077534Z         GitStash stash;
2025-10-02T07:00:57.3077844Z                  ^
2025-10-02T07:00:57.3078259Z src/core/GitManager.h:115:24: note: Shadowed declaration
2025-10-02T07:00:57.3079114Z     GitOperationResult stash(const std::string& message = "", bool includeUntracked = false);
2025-10-02T07:00:57.3079842Z                        ^
2025-10-02T07:00:57.3080294Z src/core/GitManager.cpp:650:18: note: Shadow variable
2025-10-02T07:00:57.3081417Z         GitStash stash;
2025-10-02T07:00:57.3081991Z                  ^
2025-10-02T07:00:57.3082984Z src/core/GitManager.cpp:546:20: performance: Inefficient usage of string::find() in condition; string::starts_with() could be faster. [stlIfStrFind]
2025-10-02T07:00:57.3084280Z         if (branch.name.find("origin/") == 0 || branch.name.find("remotes/") == 0) {
2025-10-02T07:00:57.3085319Z                    ^
2025-10-02T07:00:57.3086209Z src/core/GitManager.cpp:549:24: performance: Inefficient usage of string::find() in condition; string::starts_with() could be faster. [stlIfStrFind]
2025-10-02T07:00:57.3087243Z             if (branch.name.find("remotes/") == 0) {
2025-10-02T07:00:57.3087680Z                        ^
2025-10-02T07:00:57.3193930Z Checking src/core/GitManager.cpp: USE_LIBGIT2...
2025-10-02T07:00:58.0427983Z Checking src/core/GitManager.cpp: _WIN32...
2025-10-02T07:00:58.7512422Z 1/3 files checked 56% done
2025-10-02T07:00:58.7513540Z Checking src/core/GitUtils.cpp ...
2025-10-02T07:00:58.7980415Z src/core/GitUtils.cpp:339:18: performance: Ineffective call of function 'substr' because a prefix of the string is assigned to itself. Use resize() or pop_back() instead. [uselessCallsSubstr]
2025-10-02T07:00:58.7982539Z         result = result.substr(0, result.length() - 4);
2025-10-02T07:00:58.7983087Z                  ^
2025-10-02T07:00:58.7983998Z src/core/GitUtils.cpp:226:5: style: Consider using std::all_of or std::none_of algorithm instead of a raw loop. [useStlAlgorithm]
2025-10-02T07:00:58.7985037Z     for (const auto& invalid : INVALID_BRANCH_CHARS) {
2025-10-02T07:00:58.7985531Z     ^
2025-10-02T07:00:58.7986009Z src/core/GitUtils.cpp:434:21: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
2025-10-02T07:00:58.7986569Z         if (c == 0) {
2025-10-02T07:00:58.7986782Z                     ^
2025-10-02T07:00:58.7987289Z src/core/GitUtils.cpp:468:13: style: Consider using std::count_if algorithm instead of a raw loop. [useStlAlgorithm]
2025-10-02T07:00:58.7987867Z             count++;
2025-10-02T07:00:58.7988073Z             ^
2025-10-02T07:00:58.7988559Z src/core/GitUtils.cpp:481:13: style: Consider using std::count_if algorithm instead of a raw loop. [useStlAlgorithm]
2025-10-02T07:00:58.7989113Z             count++;
2025-10-02T07:00:58.7989324Z             ^
2025-10-02T07:00:58.8008004Z 2/3 files checked 80% done
2025-10-02T07:00:58.8008388Z Checking src/core/SystemCommand.cpp ...
2025-10-02T07:00:58.8180696Z src/core/SystemCommand.cpp:305:21: style: Local variable 'bytesRead' shadows outer variable [shadowVariable]
2025-10-02T07:00:58.8181788Z             ssize_t bytesRead;
2025-10-02T07:00:58.8182144Z                     ^
2025-10-02T07:00:58.8182547Z src/core/SystemCommand.cpp:293:17: note: Shadowed declaration
2025-10-02T07:00:58.8182939Z         ssize_t bytesRead;
2025-10-02T07:00:58.8183169Z                 ^
2025-10-02T07:00:58.8183460Z src/core/SystemCommand.cpp:305:21: note: Shadow variable
2025-10-02T07:00:58.8184005Z             ssize_t bytesRead;
2025-10-02T07:00:58.8184394Z                     ^
2025-10-02T07:00:58.8185155Z src/core/SystemCommand.cpp:320:33: style: Local variable 'result' shadows outer variable [shadowVariable]
2025-10-02T07:00:58.8185723Z             SystemCommandResult result;
2025-10-02T07:00:58.8186013Z                                 ^
2025-10-02T07:00:58.8186375Z src/core/SystemCommand.cpp:290:15: note: Shadowed declaration
2025-10-02T07:00:58.8186812Z         pid_t result = waitpid(pid, &status, WNOHANG);
2025-10-02T07:00:58.8187132Z               ^
2025-10-02T07:00:58.8187424Z src/core/SystemCommand.cpp:320:33: note: Shadow variable
2025-10-02T07:00:58.8187797Z             SystemCommandResult result;
2025-10-02T07:00:58.8188084Z                                 ^
2025-10-02T07:00:58.8188714Z src/core/SystemCommand.cpp:244:19: style: Consider using std::transform algorithm instead of a raw loop. [useStlAlgorithm]
2025-10-02T07:00:58.8189400Z             cArgs.push_back(const_cast<char*>(arg.c_str()));
2025-10-02T07:00:58.8190200Z                   ^
2025-10-02T07:00:58.8203458Z Checking src/core/SystemCommand.cpp: _WIN32...
2025-10-02T07:00:58.8345615Z src/core/SystemCommand.cpp:416:73: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
2025-10-02T07:00:58.8346585Z         if (GetFileAttributes(path.c_str()) != INVALID_FILE_ATTRIBUTES) {
2025-10-02T07:00:58.8347438Z                                                                         ^
2025-10-02T07:00:58.8361232Z 3/3 files checked 100% done
2025-10-02T07:00:58.8362822Z src/core/GitManager.cpp:65:0: style: The function 'initRepository' is never used. [unusedFunction]
2025-10-02T07:00:58.8364024Z GitOperationResult GitManager::initRepository(const std::string& path, bool bare) {
2025-10-02T07:00:58.8364810Z ^
2025-10-02T07:00:58.8365505Z src/core/GitManager.cpp:90:0: style: The function 'openRepository' is never used. [unusedFunction]
2025-10-02T07:00:58.8366601Z GitOperationResult GitManager::openRepository(const std::string& path) {
2025-10-02T07:00:58.8367343Z ^
2025-10-02T07:00:58.8368036Z src/core/GitManager.cpp:121:0: style: The function 'getRepositoryInfo' is never used. [unusedFunction]
2025-10-02T07:00:58.8369009Z GitRepository GitManager::getRepositoryInfo() const {
2025-10-02T07:00:58.8369576Z ^
2025-10-02T07:00:58.8370446Z src/core/GitManager.cpp:232:0: style: The function 'getRepositoryPath' is never used. [unusedFunction]
2025-10-02T07:00:58.8371681Z std::string GitManager::getRepositoryPath() const {
2025-10-02T07:00:58.8372450Z ^
2025-10-02T07:00:58.8373173Z src/core/GitManager.cpp:247:0: style: The function 'addAllFiles' is never used. [unusedFunction]
2025-10-02T07:00:58.8374209Z GitOperationResult GitManager::addAllFiles() {
2025-10-02T07:00:58.8374784Z ^
2025-10-02T07:00:58.8375486Z src/core/GitManager.cpp:251:0: style: The function 'removeFiles' is never used. [unusedFunction]
2025-10-02T07:00:58.8376643Z GitOperationResult GitManager::removeFiles(const std::vector<std::string>& files, bool cached) {
2025-10-02T07:00:58.8377566Z ^
2025-10-02T07:00:58.8378264Z src/core/GitManager.cpp:265:0: style: The function 'resetFiles' is never used. [unusedFunction]
2025-10-02T07:00:58.8379384Z GitOperationResult GitManager::resetFiles(const std::vector<std::string>& files) {
2025-10-02T07:00:58.8380279Z ^
2025-10-02T07:00:58.8427762Z src/core/GitManager.cpp:276:0: style: The function 'resetHard' is never used. [unusedFunction]
2025-10-02T07:00:58.8428694Z GitOperationResult GitManager::resetHard(const std::string& commitHash) {
2025-10-02T07:00:58.8429189Z ^
2025-10-02T07:00:58.8429543Z src/core/GitManager.cpp:289:0: style: The function 'commitWithFiles' is never used. [unusedFunction]
2025-10-02T07:00:58.8430099Z GitOperationResult GitManager::commitWithFiles(const std::string& message,
2025-10-02T07:00:58.8430425Z ^
2025-10-02T07:00:58.8430759Z src/core/GitManager.cpp:301:0: style: The function 'getCommitHistory' is never used. [unusedFunction]
2025-10-02T07:00:58.8431260Z std::vector<GitCommit> GitManager::getCommitHistory(int maxCount,
2025-10-02T07:00:58.8431790Z ^
2025-10-02T07:00:58.8432216Z src/core/GitManager.cpp:350:0: style: The function 'getCommit' is never used. [unusedFunction]
2025-10-02T07:00:58.8432721Z std::optional<GitCommit> GitManager::getCommit(const std::string& hash) const {
2025-10-02T07:00:58.8433048Z ^
2025-10-02T07:00:58.8433355Z src/core/GitManager.cpp:477:0: style: The function 'getLastError' is never used. [unusedFunction]
2025-10-02T07:00:58.8433766Z std::string GitManager::getLastError() const {
2025-10-02T07:00:58.8434016Z ^
2025-10-02T07:00:58.8434350Z src/core/GitManager.cpp:481:0: style: The function 'hasUncommittedChanges' is never used. [unusedFunction]
2025-10-02T07:00:58.8434805Z bool GitManager::hasUncommittedChanges() const {
2025-10-02T07:00:58.8435041Z ^
2025-10-02T07:00:58.8435361Z src/core/GitManager.cpp:485:0: style: The function 'hasUnstagedChanges' is never used. [unusedFunction]
2025-10-02T07:00:58.8435814Z bool GitManager::hasUnstagedChanges() const {
2025-10-02T07:00:58.8436299Z ^
2025-10-02T07:00:58.8436618Z src/core/GitManager.cpp:489:0: style: The function 'hasStagedChanges' is never used. [unusedFunction]
2025-10-02T07:00:58.8437052Z bool GitManager::hasStagedChanges() const {
2025-10-02T07:00:58.8437271Z ^
2025-10-02T07:00:58.8437575Z src/core/GitManager.cpp:493:0: style: The function 'setLogCallback' is never used. [unusedFunction]
2025-10-02T07:00:58.8438155Z void GitManager::setLogCallback(LogCallback callback) {
2025-10-02T07:00:58.8438410Z ^
2025-10-02T07:00:58.8438734Z src/core/GitManager.cpp:497:0: style: The function 'setProgressCallback' is never used. [unusedFunction]
2025-10-02T07:00:58.8439247Z void GitManager::setProgressCallback(ProgressCallback callback) {
2025-10-02T07:00:58.8439535Z ^
2025-10-02T07:00:58.8439876Z src/core/GitManager.cpp:501:0: style: The function 'cloneRepositoryAsync' is never used. [unusedFunction]
2025-10-02T07:00:58.8440560Z std::future<GitOperationResult> GitManager::cloneRepositoryAsync(const std::string& url,
2025-10-02T07:00:58.8440928Z ^
2025-10-02T07:00:58.8441226Z src/core/GitManager.cpp:513:0: style: The function 'getBranches' is never used. [unusedFunction]
2025-10-02T07:00:58.8441952Z std::vector<GitBranch> GitManager::getBranches(bool includeRemote) const {
2025-10-02T07:00:58.8442261Z ^
2025-10-02T07:00:58.8442555Z src/core/GitManager.cpp:606:0: style: The function 'createBranch' is never used. [unusedFunction]
2025-10-02T07:00:58.8443142Z GitOperationResult GitManager::createBranch(const std::string& name, const std::string& startPoint) {
2025-10-02T07:00:58.8443551Z ^
2025-10-02T07:00:58.8443855Z src/core/GitManager.cpp:617:0: style: The function 'deleteBranch' is never used. [unusedFunction]
2025-10-02T07:00:58.8444375Z GitOperationResult GitManager::deleteBranch(const std::string& name, bool force) {
2025-10-02T07:00:58.8444732Z ^
2025-10-02T07:00:58.8445046Z src/core/GitManager.cpp:627:0: style: The function 'checkoutBranch' is never used. [unusedFunction]
2025-10-02T07:00:58.8445564Z GitOperationResult GitManager::checkoutBranch(const std::string& name) {
2025-10-02T07:00:58.8445884Z ^
2025-10-02T07:00:58.8446182Z src/core/GitManager.cpp:632:0: style: The function 'getStashes' is never used. [unusedFunction]
2025-10-02T07:00:58.8446610Z std::vector<GitStash> GitManager::getStashes() const {
2025-10-02T07:00:58.8446857Z ^
2025-10-02T07:00:58.8447146Z src/core/GitManager.cpp:677:0: style: The function 'stash' is never used. [unusedFunction]
2025-10-02T07:00:58.8447702Z GitOperationResult GitManager::stash(const std::string& message, bool includeUntracked) {
2025-10-02T07:00:58.8448073Z ^
2025-10-02T07:00:58.8448372Z src/core/GitManager.cpp:692:0: style: The function 'stashPop' is never used. [unusedFunction]
2025-10-02T07:00:58.8448849Z GitOperationResult GitManager::stashPop(int index) {
2025-10-02T07:00:58.8449114Z ^
2025-10-02T07:00:58.8449421Z src/core/GitManager.cpp:702:0: style: The function 'stashApply' is never used. [unusedFunction]
2025-10-02T07:00:58.8449866Z GitOperationResult GitManager::stashApply(int index) {
2025-10-02T07:00:58.8450130Z ^
2025-10-02T07:00:58.8450426Z src/core/GitManager.cpp:712:0: style: The function 'stashDrop' is never used. [unusedFunction]
2025-10-02T07:00:58.8450853Z GitOperationResult GitManager::stashDrop(int index) {
2025-10-02T07:00:58.8451112Z ^
2025-10-02T07:00:58.8451403Z src/core/GitManager.cpp:722:0: style: The function 'stashClear' is never used. [unusedFunction]
2025-10-02T07:00:58.8452089Z GitOperationResult GitManager::stashClear() {
2025-10-02T07:00:58.8452331Z ^
2025-10-02T07:00:58.8452640Z src/core/GitManager.cpp:727:0: style: The function 'getCommitDiff' is never used. [unusedFunction]
2025-10-02T07:00:58.8453136Z GitDiff GitManager::getCommitDiff(const std::string& commitHash) const {
2025-10-02T07:00:58.8453443Z ^
2025-10-02T07:00:58.8453766Z src/core/GitManager.cpp:810:0: style: The function 'getCommitDiffAll' is never used. [unusedFunction]
2025-10-02T07:00:58.8454302Z std::vector<GitDiff> GitManager::getCommitDiffAll(const std::string& commitHash) const {
2025-10-02T07:00:58.8454805Z ^
2025-10-02T07:00:58.8455099Z src/core/GitManager.cpp:913:0: style: The function 'getRemotes' is never used. [unusedFunction]
2025-10-02T07:00:58.8455518Z std::vector<GitRemote> GitManager::getRemotes() const {
2025-10-02T07:00:58.8455771Z ^
2025-10-02T07:00:58.8456058Z src/core/GitManager.cpp:959:0: style: The function 'addRemote' is never used. [unusedFunction]
2025-10-02T07:00:58.8456711Z GitOperationResult GitManager::addRemote(const std::string& name, const std::string& url) {
2025-10-02T07:00:58.8457084Z ^
2025-10-02T07:00:58.8457394Z src/core/GitManager.cpp:971:0: style: The function 'removeRemote' is never used. [unusedFunction]
2025-10-02T07:00:58.8457885Z GitOperationResult GitManager::removeRemote(const std::string& name) {
2025-10-02T07:00:58.8458221Z ^
2025-10-02T07:00:58.8458538Z src/core/GitManager.cpp:983:0: style: The function 'renameRemote' is never used. [unusedFunction]
2025-10-02T07:00:58.8459140Z GitOperationResult GitManager::renameRemote(const std::string& oldName, const std::string& newName) {
2025-10-02T07:00:58.8459557Z ^
2025-10-02T07:00:58.8459851Z src/core/GitManager.cpp:996:0: style: The function 'getTags' is never used. [unusedFunction]
2025-10-02T07:00:58.8460258Z std::vector<GitTag> GitManager::getTags() const {
2025-10-02T07:00:58.8460491Z ^
2025-10-02T07:00:58.8460792Z src/core/GitManager.cpp:1039:0: style: The function 'createTag' is never used. [unusedFunction]
2025-10-02T07:00:58.8461352Z GitOperationResult GitManager::createTag(const std::string& name, const std::string& message,
2025-10-02T07:00:58.8462048Z ^
2025-10-02T07:00:58.8462368Z src/core/GitManager.cpp:1065:0: style: The function 'deleteTag' is never used. [unusedFunction]
2025-10-02T07:00:58.8462849Z GitOperationResult GitManager::deleteTag(const std::string& name) {
2025-10-02T07:00:58.8463155Z ^
2025-10-02T07:00:58.8463453Z src/core/GitManager.cpp:1077:0: style: The function 'pushTags' is never used. [unusedFunction]
2025-10-02T07:00:58.8463935Z GitOperationResult GitManager::pushTags(const std::string& remote) {
2025-10-02T07:00:58.8464253Z ^
2025-10-02T07:00:58.8464541Z src/core/GitManager.h:29:0: style: The function 'hasError' is never used. [unusedFunction]
2025-10-02T07:00:58.8464985Z     bool hasError() const { return !error.empty() || exitCode != 0; }
2025-10-02T07:00:58.8465266Z ^
2025-10-02T07:00:58.8465539Z src/core/GitTypes.h:37:0: style: The function 'isMerge' is never used. [unusedFunction]
2025-10-02T07:00:58.8465949Z     bool isMerge() const { return parentHashes.size() > 1; }
2025-10-02T07:00:58.8466213Z ^
2025-10-02T07:00:58.8466477Z src/core/GitUtils.cpp:48:0: style: The function 'join' is never used. [unusedFunction]
2025-10-02T07:00:58.8466981Z std::string GitUtils::join(const std::vector<std::string>& parts, const std::string& delimiter) {
2025-10-02T07:00:58.8467387Z ^
2025-10-02T07:00:58.8467671Z src/core/GitUtils.cpp:73:0: style: The function 'toUpper' is never used. [unusedFunction]
2025-10-02T07:00:58.8468088Z std::string GitUtils::toUpper(const std::string& str) {
2025-10-02T07:00:58.8468338Z ^
2025-10-02T07:00:58.8468636Z src/core/GitUtils.cpp:80:0: style: The function 'normalizePath' is never used. [unusedFunction]
2025-10-02T07:00:58.8469080Z std::string GitUtils::normalizePath(const std::string& path) {
2025-10-02T07:00:58.8469356Z ^
2025-10-02T07:00:58.8469644Z src/core/GitUtils.cpp:89:0: style: The function 'getFileName' is never used. [unusedFunction]
2025-10-02T07:00:58.8470069Z std::string GitUtils::getFileName(const std::string& path) {
2025-10-02T07:00:58.8470334Z ^
2025-10-02T07:00:58.8470617Z src/core/GitUtils.cpp:99:0: style: The function 'getDirectory' is never used. [unusedFunction]
2025-10-02T07:00:58.8471048Z std::string GitUtils::getDirectory(const std::string& path) {
2025-10-02T07:00:58.8471314Z ^
2025-10-02T07:00:58.8471820Z src/core/GitUtils.cpp:104:0: style: The function 'joinPaths' is never used. [unusedFunction]
2025-10-02T07:00:58.8472328Z std::string GitUtils::joinPaths(const std::string& path1, const std::string& path2) {
2025-10-02T07:00:58.8472816Z ^
2025-10-02T07:00:58.8473127Z src/core/GitUtils.cpp:109:0: style: The function 'isAbsolutePath' is never used. [unusedFunction]
2025-10-02T07:00:58.8473573Z bool GitUtils::isAbsolutePath(const std::string& path) {
2025-10-02T07:00:58.8473834Z ^
2025-10-02T07:00:58.8474145Z src/core/GitUtils.cpp:114:0: style: The function 'makeRelativePath' is never used. [unusedFunction]
2025-10-02T07:00:58.8474791Z std::string GitUtils::makeRelativePath(const std::string& from, const std::string& to) {
2025-10-02T07:00:58.8475141Z ^
2025-10-02T07:00:58.8475436Z src/core/GitUtils.cpp:124:0: style: The function 'shortenHash' is never used. [unusedFunction]
2025-10-02T07:00:58.8475903Z std::string GitUtils::shortenHash(const std::string& hash, int length) {
2025-10-02T07:00:58.8476203Z ^
2025-10-02T07:00:58.8476499Z src/core/GitUtils.cpp:131:0: style: The function 'isValidHash' is never used. [unusedFunction]
2025-10-02T07:00:58.8476932Z bool GitUtils::isValidHash(const std::string& hash) {
2025-10-02T07:00:58.8477210Z ^
2025-10-02T07:00:58.8477537Z src/core/GitUtils.cpp:139:0: style: The function 'formatCommitMessage' is never used. [unusedFunction]
2025-10-02T07:00:58.8478085Z std::string GitUtils::formatCommitMessage(const std::string& message, int maxLength) {
2025-10-02T07:00:58.8478442Z ^
2025-10-02T07:00:58.8478736Z src/core/GitUtils.cpp:156:0: style: The function 'formatAuthor' is never used. [unusedFunction]
2025-10-02T07:00:58.8479252Z std::string GitUtils::formatAuthor(const std::string& name, const std::string& email) {
2025-10-02T07:00:58.8479592Z ^
2025-10-02T07:00:58.8479903Z src/core/GitUtils.cpp:169:0: style: The function 'formatTimestamp' is never used. [unusedFunction]
2025-10-02T07:00:58.8480452Z std::string GitUtils::formatTimestamp(const std::chrono::system_clock::time_point& timestamp) {
2025-10-02T07:00:58.8480834Z ^
2025-10-02T07:00:58.8481152Z src/core/GitUtils.cpp:176:0: style: The function 'formatRelativeTime' is never used. [unusedFunction]
2025-10-02T07:00:58.8481957Z std::string GitUtils::formatRelativeTime(const std::chrono::system_clock::time_point& timestamp) {
2025-10-02T07:00:58.8482345Z ^
2025-10-02T07:00:58.8482655Z src/core/GitUtils.cpp:221:0: style: The function 'isValidBranchName' is never used. [unusedFunction]
2025-10-02T07:00:58.8483113Z bool GitUtils::isValidBranchName(const std::string& name) {
2025-10-02T07:00:58.8483387Z ^
2025-10-02T07:00:58.8483712Z src/core/GitUtils.cpp:235:0: style: The function 'sanitizeBranchName' is never used. [unusedFunction]
2025-10-02T07:00:58.8484188Z std::string GitUtils::sanitizeBranchName(const std::string& name) {
2025-10-02T07:00:58.8484478Z ^
2025-10-02T07:00:58.8484791Z src/core/GitUtils.cpp:258:0: style: The function 'getShortBranchName' is never used. [unusedFunction]
2025-10-02T07:00:58.8485276Z std::string GitUtils::getShortBranchName(const std::string& fullName) {
2025-10-02T07:00:58.8485580Z ^
2025-10-02T07:00:58.8485879Z src/core/GitUtils.cpp:271:0: style: The function 'isRemoteBranch' is never used. [unusedFunction]
2025-10-02T07:00:58.8486345Z bool GitUtils::isRemoteBranch(const std::string& branchName) {
2025-10-02T07:00:58.8486620Z ^
2025-10-02T07:00:58.8486946Z src/core/GitUtils.cpp:275:0: style: The function 'getRemoteFromBranch' is never used. [unusedFunction]
2025-10-02T07:00:58.8487451Z std::string GitUtils::getRemoteFromBranch(const std::string& branchName) {
2025-10-02T07:00:58.8487764Z ^
2025-10-02T07:00:58.8488075Z src/core/GitUtils.cpp:290:0: style: The function 'isValidGitUrl' is never used. [unusedFunction]
2025-10-02T07:00:58.8488506Z bool GitUtils::isValidGitUrl(const std::string& url) {
2025-10-02T07:00:58.8488761Z ^
2025-10-02T07:00:58.8489092Z src/core/GitUtils.cpp:313:0: style: The function 'extractRepoNameFromUrl' is never used. [unusedFunction]
2025-10-02T07:00:58.8489605Z std::string GitUtils::extractRepoNameFromUrl(const std::string& url) {
2025-10-02T07:00:58.8489901Z ^
2025-10-02T07:00:58.8490208Z src/core/GitUtils.cpp:351:0: style: The function 'normalizeGitUrl' is never used. [unusedFunction]
2025-10-02T07:00:58.8490804Z std::string GitUtils::normalizeGitUrl(const std::string& url) {
2025-10-02T07:00:58.8491074Z ^
2025-10-02T07:00:58.8491362Z src/core/GitUtils.cpp:371:0: style: The function 'isHttpsUrl' is never used. [unusedFunction]
2025-10-02T07:00:58.8492021Z bool GitUtils::isHttpsUrl(const std::string& url) {
2025-10-02T07:00:58.8492272Z ^
2025-10-02T07:00:58.8492684Z src/core/GitUtils.cpp:375:0: style: The function 'isSshUrl' is never used. [unusedFunction]
2025-10-02T07:00:58.8493085Z bool GitUtils::isSshUrl(const std::string& url) {
2025-10-02T07:00:58.8493324Z ^
2025-10-02T07:00:58.8493613Z src/core/GitUtils.cpp:380:0: style: The function 'isValidEmail' is never used. [unusedFunction]
2025-10-02T07:00:58.8494038Z bool GitUtils::isValidEmail(const std::string& email) {
2025-10-02T07:00:58.8494288Z ^
2025-10-02T07:00:58.8494622Z src/core/GitUtils.cpp:385:0: style: The function 'isValidCommitMessage' is never used. [unusedFunction]
2025-10-02T07:00:58.8495107Z bool GitUtils::isValidCommitMessage(const std::string& message) {
2025-10-02T07:00:58.8495401Z ^
2025-10-02T07:00:58.8495688Z src/core/GitUtils.cpp:399:0: style: The function 'isBinaryFile' is never used. [unusedFunction]
2025-10-02T07:00:58.8496119Z bool GitUtils::isBinaryFile(const std::string& filePath) {
2025-10-02T07:00:58.8496386Z ^
2025-10-02T07:00:58.8496697Z src/core/GitUtils.cpp:404:0: style: The function 'detectFileEncoding' is never used. [unusedFunction]
2025-10-02T07:00:58.8497199Z std::string GitUtils::detectFileEncoding(const std::string& filePath) {
2025-10-02T07:00:58.8497494Z ^
2025-10-02T07:00:58.8497801Z src/core/GitUtils.cpp:443:0: style: The function 'colorizeGitDiff' is never used. [unusedFunction]
2025-10-02T07:00:58.8498253Z std::string GitUtils::colorizeGitDiff(const std::string& diff) {
2025-10-02T07:00:58.8498535Z ^
2025-10-02T07:00:58.8498835Z src/core/GitUtils.cpp:462:0: style: The function 'countLinesAdded' is never used. [unusedFunction]
2025-10-02T07:00:58.8499276Z int GitUtils::countLinesAdded(const std::string& diff) {
2025-10-02T07:00:58.8499538Z ^
2025-10-02T07:00:58.8499849Z src/core/GitUtils.cpp:475:0: style: The function 'countLinesRemoved' is never used. [unusedFunction]
2025-10-02T07:00:58.8500299Z int GitUtils::countLinesRemoved(const std::string& diff) {
2025-10-02T07:00:58.8500559Z ^
2025-10-02T07:00:58.8500869Z src/core/GitUtils.cpp:488:0: style: The function 'extractHunkHeader' is never used. [unusedFunction]
2025-10-02T07:00:58.8501340Z std::string GitUtils::extractHunkHeader(const std::string& line) {
2025-10-02T07:00:58.8501857Z ^
2025-10-02T07:00:58.8502182Z src/core/GitUtils.cpp:499:0: style: The function 'formatProgress' is never used. [unusedFunction]
2025-10-02T07:00:58.8502731Z std::string GitUtils::formatProgress(int current, int total, const std::string& operation) {
2025-10-02T07:00:58.8503095Z ^
2025-10-02T07:00:58.8503416Z src/core/GitUtils.cpp:515:0: style: The function 'formatTransferSpeed' is never used. [unusedFunction]
2025-10-02T07:00:58.8503910Z std::string GitUtils::formatTransferSpeed(size_t bytesPerSecond) {
2025-10-02T07:00:58.8504200Z ^
2025-10-02T07:00:58.8504509Z src/core/GitUtils.cpp:519:0: style: The function 'formatDuration' is never used. [unusedFunction]
2025-10-02T07:00:58.8505018Z std::string GitUtils::formatDuration(const std::chrono::milliseconds& duration) {
2025-10-02T07:00:58.8505351Z ^
2025-10-02T07:00:58.8505712Z src/core/SystemCommand.cpp:343:0: style: The function 'executeWithCallback' is never used. [unusedFunction]
2025-10-02T07:00:58.8506405Z SystemCommandResult SystemCommand::executeWithCallback(const std::string& command, const std::vector<std::string>& args,
2025-10-02T07:00:58.8506877Z ^
2025-10-02T07:00:58.8507197Z src/core/SystemCommand.cpp:358:0: style: The function 'executeAsync' is never used. [unusedFunction]
2025-10-02T07:00:58.8507770Z void SystemCommand::executeAsync(const std::string& command, const std::vector<std::string>& args,
2025-10-02T07:00:58.8508159Z ^
2025-10-02T07:00:58.8508513Z src/core/SystemCommand.cpp:383:0: style: The function 'setEnvironmentVariable' is never used. [unusedFunction]
2025-10-02T07:00:58.8509266Z void SystemCommand::setEnvironmentVariable(const std::string& name, const std::string& value) {
2025-10-02T07:00:58.8509652Z ^
2025-10-02T07:00:58.8510020Z src/core/SystemCommand.cpp:387:0: style: The function 'clearEnvironmentVariables' is never used. [unusedFunction]
2025-10-02T07:00:58.8510717Z void SystemCommand::clearEnvironmentVariables() {
2025-10-02T07:00:58.8510972Z ^
2025-10-02T07:00:58.8511289Z src/core/SystemCommand.cpp:391:0: style: The function 'setTimeout' is never used. [unusedFunction]
2025-10-02T07:00:58.8511961Z void SystemCommand::setTimeout(int timeoutMs) {
2025-10-02T07:00:58.8512204Z ^
2025-10-02T07:00:58.8512533Z src/core/SystemCommand.cpp:405:0: style: The function 'getGitCommand' is never used. [unusedFunction]
2025-10-02T07:00:58.8512972Z std::string SystemCommand::getGitCommand() {
2025-10-02T07:00:58.8513197Z ^
2025-10-02T07:00:58.8513500Z src/core/SystemCommand.h:14:0: style: The function 'success' is never used. [unusedFunction]
2025-10-02T07:00:58.8513908Z     bool success() const { return exitCode == 0; }
2025-10-02T07:00:58.8514149Z ^
2025-10-02T07:00:58.8514523Z nofile:0:0: information: Active checkers: 161/592 (use --checkers-report=<filename> to see details) [checkersReport]
2025-10-02T07:00:58.8514896Z 
